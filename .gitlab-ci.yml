# stages:
#   - build
#   - test
#   - deploy

# build-job:
#   stage: build
#   variables:
#     ANDROID_COMPILE_SDK: "33"
#     ANDROID_BUILD_TOOLS: "33.0.0"
#     ANDROID_SDK_TOOLS: "9477386"
#   image: openjdk:11-jdk

#   # Packages installation before running script
#   before_script:
#     - apt-get --quiet update --yes
#     - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1 nodejs npm gradle adb libpulse0 kmod qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils

#     #- sudo apt update
#     - curl -fsSL https://deb.nodesource.com/setup_19.x | bash - &&\
#     - apt-get install -y nodejs

#     # Setup path as ANDROID_SDK_ROOT for moving/exporting the downloaded sdk into it
#     - export ANDROID_SDK_ROOT="${PWD}/android-home"
#     # Create a new directory at specified location
#     - install -d $ANDROID_SDK_ROOT

#     #Installing the Android SDK
#     - wget --quiet --output-document=$ANDROID_SDK_ROOT/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
#     - pushd $ANDROID_SDK_ROOT
#     - unzip -d cmdline-tools cmdline-tools.zip
#     - pushd cmdline-tools
#     - mv cmdline-tools tools || true
#     - popd
#     - popd
#     - export PATH=$PATH:${ANDROID_SDK_ROOT}/cmdline-tools/tools/bin/

#     # Nothing fancy here, just checking sdkManager version
#     - sdkmanager --version

#     # use yes to accept all licenses
#     - yes | sdkmanager --licenses || true
#     - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
#     - sdkmanager "platform-tools"
#     - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"
#     - sdkmanager "system-images;android-${ANDROID_COMPILE_SDK};google_apis;x86_64"

#     - avdmanager create avd --name Test --package "system-images;android-33;google_apis;x86_64" --device "Nexus 5X" --force

#     - npm i react-native-eject
#     - npx react-native eject
#     - npm install

#     - adb kill-server && adb start-server
#     #- cd /${ANDROID_SDK_ROOT}
#     #- sdkmanager emulator
#     #- cd /${ANDROID_SDK_ROOT}/emulator
#     #- ./emulator -avd Test -no-audio -no-window
#     #- cd

#   script:
#     - npx react-native run-android

# This is an example CI/CD script for a React Native Android app on GitLab

image: node:14.17.6-alpine3.14

# Set up environment variables
variables:
  ANDROID_COMPILE_SDK: "33"
  ANDROID_BUILD_TOOLS: "33.0.0"
  ANDROID_SDK_TOOLS:   "9477386"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - android/.gradle/
    - android/.idea/
    - android/app/build/
    - android/build/
    - node_modules/
    - /usr/local/share/.cache/yarn/
    - $ANDROID_HOME/

# Install dependencies
before_script:
  - apk add --no-cache openjdk11
  - apk add --no-cache python2
  - apk add --no-cache bash
  - apk add --no-cache git
  - npm install -g react-native-cli
  - npm install

# Build and test the app
build:
  stage: build
  script:
    # Set up Android SDK
    - install -d andriod-sdk
    - wget --quiet --output-document=andriod-sdk/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    - pushd andriod-sdk
    - unzip -d cmdline-tools cmdline-tools.zip
    - pushd cmdline-tools
    - mv cmdline-tools tools || true
    - popd
    - popd
    - export PATH=$PATH:andriod-sdk/cmdline-tools/tools/bin/
    

    - yes | sdkmanager --licenses
    - sdkmanager --update
    - sdkmanager "platform-tools" "platforms;android-$ANDROID_COMPILE_SDK" "build-tools;$ANDROID_BUILD_TOOLS"

    # Build the app
    - cd android && ./gradlew assembleDebug

  artifacts:
    paths:
      - android/app/build/outputs/apk/debug/app-debug.apk

  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - /usr/local/share/.cache/yarn
      - node_modules

test:
  stage: test
  script:
    # Run tests
    - npm test

